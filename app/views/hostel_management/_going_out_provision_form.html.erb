<%= render  partial: 'dashboards/student_dashboard_left' %>
    
<% navigation_add t('going_out_provision'), :controller=>'hostel_management', :action=>'going_out_provision' %>


<% if @action=='new'%>
  <h4 class="mg-h4"><%=t('new_going_out_provision_details')%></h4>
  <% navigation_add t('new'),:controller=>'hostel_management',:action=>'going_out_provision_new' %>
<% else %>
  <h4 class="mg-h4"><%=t('edit_going_out_provision_details')%></h4>
  <% navigation_add  t('edit'), :controller=>'hostel_management', :action=>'going_out_provision_edit',:id=>params[:id] %>
<%end%>

<% studentData=MgStudent.where(:mg_user_id=>session[:user_id]).pluck(:id)%>
 <% allocate_data=MgAllocateRoomList.find_by(:mg_student_id=>studentData) %>

 <% if allocate_data.present? %>
<%= form_for :going_out_prov ,:url=>@action=='new' ? 'going_out_provision_create': '/hostel_management/'+@provision.try(:id).to_s+'/going_out_provision_update', :html => {:id => 'goingOutProvisionID' } do |f| %>


<%= f.hidden_field :is_deleted, :value => 0 %>
<%= f.hidden_field :mg_school_id, :value => session[:current_user_school_id] %>
<% if @action=='new'  %>
  <%= f.hidden_field :created_by, :value => session[:user_id] %>
<% end %> 
<%= f.hidden_field :updated_by, :value => session[:user_id] %>
<% if @action=='new'  %>
<%
 hostel_details=MgHostelDetails.find_by(:id=>@student_details_data.mg_hostel_details_id)%>
<% end %> 
<% if @action=='new'  %>

<p>
      <%= f.label :reason, t('hostel') ,:class=>"mg-label"%><span class="required-field"> *</span><br>

        <%= text_field_tag :hostel_detals  ,hostel_details.try(:name),:readonly=>true %>


    
  </p>
  <%else%>
  <p>
  <%hostel_details=MgHostelDetails.find_by(:id=>@provision.mg_hostel_details_id)%>
      <%= f.label :reason, t('hostel') ,:class=>"mg-label"%><span class="required-field"> *</span><br>

        <%= text_field_tag :hostel_detals  ,hostel_details.try(:name),:readonly=>true %>


    
  </p>
<% end %> 

  <p>
      <%= f.label :reason, t('reason') ,:class=>"mg-label"%><span class="required-field"> *</span><br>

    <% if @action=='new'%>
        <%= f.text_area :reason  ,:class=> 'mg-text-field'%>

    <% else %>
        <%= f.text_area :reason  ,:class=> 'mg-text-field',:value=>@provision.reason%>
    <%end%>
  </p>

  <p>
      <%= f.label :from_date, t('from_date') ,:class=>"mg-label"%><span class="required-field"> *</span><br>

    <% if @action=='new'%>
        <%= f.text_field :from_date, :class=>"mg-text-field" %>

    <% else %>
        <%= f.text_field :from_date, :class=>"mg-text-field",:value=>@provision.from_date.strftime(@timeformat.date_format) %>
    <%end%>
  </p>

  <p>
      <%= f.label :start_time, t('start_time') ,:class=>"mg-label"%><span class="required-field"> *</span><br>

    <% if @action=='new'%>
        <%= f.text_field :start_time, :class=>"mg-text-field " %><span id="start_time_errorID" class="error" style="font-weight: bold;">

    <% else %>
        <%= f.text_field :start_time, :class=>"mg-text-field ",:value=>@provision.start_time.try(:strftime,"%l:%M%P") %><span id="start_time_errorID" class="error" style="font-weight: bold;">

    <%end%>
  </p>

  <p>
      <%= f.label :to_date, t('to_date') ,:class=>"mg-label"%><span class="required-field"> *</span><br>

    <% if @action=='new'%>
        <%= f.text_field :to_date, :class=>"mg-text-field" %>

    <% else %>
        <%= f.text_field :to_date, :class=>"mg-text-field",:value=>@provision.to_date.strftime(@timeformat.date_format) %>
    <%end%>
  </p>
   

   <p>
      <%= f.label :end_time, t('end_time') ,:class=>"mg-label"%><span class="required-field"> *</span><br>

    <% if @action=='new'%>
        <%= f.text_field :end_time, :class=>"mg-text-field " %><span id="end_time_errorID" class="error" style="font-weight: bold;">

    <% else %>
        <%= f.text_field :end_time, :class=>"mg-text-field ",:value=>@provision.end_time.try(:strftime,"%l:%M%P") %><span id="end_time_errorID" class="error" style="font-weight: bold;">

    <%end%>
  </p>



<p>
  <%= f.label :status_data, t("status") ,:class=>"mg-label"%>
  <span class="required-field"> *</span><br>

  <% if @action=='new'%>
    <%= f.select :status,options_for_select(['Pending','Accepted','Rejected']),{},
    {:disabled=>true}%>
    <%=f.hidden_field :status,:value=>"Pending"%>
  <% else %>

      <%=select_tag :status,options_for_select([["Pending", "pending"],["Approved", "approved"],["Rejected","rejected"]],:selected=>@provision.status),{:disabled=>true}%>
    <%end%>
</p>

<p class="mg-p-mgtop">
      <a onclick="$(this).closest('form').submit()" class="mg-small-form-btn"><%=t("save")%></a>
      <%= link_to t('cancel'), {:controller=>'hostel_management',:action=>'going_out_provision'}, {:class=>"mg-small-form-btn cancel-form-dialog"} %>
  </p>


  <% end %>

  <% else %>
    Room is Not Yet Confirmed
  <% end%>

<%= render  partial: 'application/common_left_close' %>


<script type="text/javascript">
 $(document).ready(function(){

      focusCurrentTab("goingOutProvAID","goingOutProvLiID");
      
  $("#goingOutProvisionID").validate({
      rules: {     
        "going_out_prov[reason]": {required: true},
        "going_out_prov[from_date]": {required: true, dateFormat: true},
        "going_out_prov[start_time]": {required: true},
        "going_out_prov[to_date]": {required: true, dateFormat: true},
        "going_out_prov[end_time]": {required: true}
      }
    });


    dateFormatStr =  getJsDateFormat();
    $( "#going_out_prov_from_date" ).datepicker({changeMonth: true,changeYear: true,yearRange: "-0:+50",minDate: "0",dateFormat: dateFormatStr});

    $( "#going_out_prov_to_date" ).datepicker({changeMonth: true,changeYear: true,yearRange: "-50:+0",minDate: "0",dateFormat: dateFormatStr});
    $('#going_out_prov_start_time').timepicker({ 'scrollDefault': 'now' });
    $('#going_out_prov_end_time').timepicker({ 'scrollDefault': 'now'}); 

    $(function () {
      $.validator.addMethod('dateFormat',
      function (value, element) {
        dateFormatStr =  getJsDateFormat();
        if (this.optional(element)) {
            return true;
        }
        var ok = true;
        try {
            $.datepicker.parseDate(dateFormatStr, value);
        }
        catch (err) {
            ok = false;
        }
        return ok;
      },
        "Please enter a date in the format "+ getDateFormat(dateFormatStr) +".");
      dateFormatStr =  getJsDateFormat();

      $(".datefield").datepicker({ dateFormat: dateFormatStr, changeYear: true });
    });
  });



$(document).on("change","#going_out_prov_to_date",function(){
    var dateFormatStr =  getJsDateFormat();
    var start_date=$("#going_out_prov_from_date").val();
    var end_date=$(this).val();
    if(start_date && end_date){
      if(!(compareDate(start_date,end_date,dateFormatStr))){
        alert("End date should be greater than start date");
        $(this).val('');
      }else{
        var from_date=$("#going_out_prov_from_date").val();
        var to_date=$("#going_out_prov_to_date").val();
        if (from_date==to_date){
          var from = $('#going_out_prov_start_time').val();
          var to = $('#going_out_prov_end_time').val();
          var from_time=minFromMidnight(from);
          var to_time=minFromMidnight(to);
          if(from_time && to_time){
            if(from_time > to_time){
             alert("Start Time must be less than End Time");
             $('#going_out_prov_start_time').val('');
            } 
          }
        }
      }
    }
  });


$(document).on("change","#going_out_prov_from_date",function(){
    var dateFormatStr =  getJsDateFormat();
    var start_date=$(this).val();
    var end_date=$("#going_out_prov_to_date").val();

    if(start_date && end_date){
      if(!(compareDate(start_date,end_date,dateFormatStr))){
        alert("End date should be greater than start date");
        $(this).val('');
      }else{
        var from_date=$("#going_out_prov_from_date").val();
        var to_date=$("#going_out_prov_to_date").val();
        if (from_date==to_date){
          var from = $('#going_out_prov_start_time').val();
          var to = $('#going_out_prov_end_time').val();
          var from_time=minFromMidnight(from);
          var to_time=minFromMidnight(to);
          if(from_time && to_time){
            if(from_time > to_time){
             alert("Start Time must be less than End Time");
             $('#going_out_prov_start_time').val('');
            } 
          }
        }
      }
    }
  });


$(document).on("change","#going_out_prov_start_time",function(){
    var dateFormatStr =  getJsDateFormat();
    var start_date=$("#going_out_prov_from_date").val();
    var end_date=$("#going_out_prov_to_date").val();
    var start_time = $('#going_out_prov_start_time').val();
    var regexprsn = /^([1-9]|1[0-2]):([0-5]\d)\s?(AM|PM)?$/i;

    if(start_time.match(regexprsn)){
      $("#start_time_errorID").text("");

      if(start_date && end_date){
        if (start_date==end_date){
          var from = $('#going_out_prov_start_time').val();
          var to = $('#going_out_prov_end_time').val();
          var from_time=minFromMidnight(from);
          var to_time=minFromMidnight(to);
          if(from_time && to_time){
            if(from_time > to_time){
             alert("Start Time must be less than End Time");
             $('#going_out_prov_start_time').val('');
            } 
          }
        }
      }
    }else{      
      $("#start_time_errorID").text("Please enter a time in the format am/pm.");
      $('#going_out_prov_start_time').val('');
    }
  });

  $(document).on("change","#going_out_prov_end_time",function(){
    var dateFormatStr =  getJsDateFormat();
    var start_date=$("#going_out_prov_from_date").val();
    var end_date=$("#going_out_prov_to_date").val();
    var end_time = $('#going_out_prov_end_time').val();
    var regexprsn = /^([1-9]|1[0-2]):([0-5]\d)\s?(AM|PM)?$/i;
    
    if(end_time.match(regexprsn)){
      $("#end_time_errorID").text("");
    
      if(start_date && end_date){
        if (start_date==end_date){
          var from = $('#going_out_prov_start_time').val();
          var to = $('#going_out_prov_end_time').val();
          var from_time=minFromMidnight(from);
          var to_time=minFromMidnight(to);
          if(from_time && to_time){
            if(from_time > to_time){
             alert("End Time must be greater than Start Time");
             $('#going_out_prov_end_time').val('');
            } 
          }
        }
      }
    }else{      
      $("#end_time_errorID").text("Please enter a time in the format am/pm.");
      $('#going_out_prov_end_time').val('');
    }
  });


function minFromMidnight(tm){
    if(tm==''){
      return
    }
   var ampm= tm.substr(-2)
   var clk = tm.substr(0, 4);
   var m  = parseInt(clk.match(/\d+$/)[0], 10);
   var h  = parseInt(clk.match(/^\d+/)[0], 10);
   h += (ampm.match(/pm/i))? 12: 0;
   return h*60+m;
  }



  </script>
